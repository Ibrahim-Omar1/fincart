---
description: JavaScript Utilities and Library Usage
globs: 
alwaysApply: true
---
---
description: JavaScript Utilities and Library Usage
globs: ["**/*.ts", "**/*.tsx", "**/*.js"]
alwaysApply: true
---
# JavaScript Utilities and Library Usage

@file .cursorrules
@file package.json

## Lodash Usage
```typescript
import { debounce, throttle } from 'lodash'

// Debouncing
const debouncedSearch = debounce((query: string) => {
  searchAPI(query)
}, 300)

// Throttling
const throttledScroll = throttle(() => {
  updatePosition()
}, 100)

// Array manipulation
import { chunk, uniq, groupBy } from 'lodash'

const chunks = chunk(array, 2)
const unique = uniq(array)
const grouped = groupBy(items, 'category')

// Object manipulation
import { get, set, merge } from 'lodash'

const value = get(object, 'deeply.nested.property', defaultValue)
set(object, 'deeply.nested.property', value)
const merged = merge({}, object1, object2)
```

## Date Handling with Day.js
```typescript
import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import utc from 'dayjs/plugin/utc'
import timezone from 'dayjs/plugin/timezone'

// Configure plugins
dayjs.extend(relativeTime)
dayjs.extend(utc)
dayjs.extend(timezone)

// Date formatting
const formattedDate = dayjs().format('YYYY-MM-DD')
const relativeDate = dayjs().fromNow()

// Timezone handling
const localDate = dayjs.tz(date, 'America/New_York')
const utcDate = dayjs.utc(date)

// Date manipulation
const tomorrow = dayjs().add(1, 'day')
const lastWeek = dayjs().subtract(1, 'week')
const startOfMonth = dayjs().startOf('month')
```

## Async Patterns

### Promise Handling
```typescript
// Proper async/await
async function fetchData() {
  try {
    const response = await fetch(url)
    if (!response.ok) throw new Error('Network error')
    return response.json()
  } catch (error) {
    console.error('Error:', error)
    throw error
  }
}

// Promise.all with type safety
async function fetchMultiple<T>(urls: string[]): Promise<T[]> {
  const promises = urls.map(url => fetch(url).then(r => r.json()))
  return Promise.all(promises)
}

// Race condition handling
const timeoutPromise = new Promise((_, reject) => {
  setTimeout(() => reject(new Error('Timeout')), 5000)
})

const data = await Promise.race([fetchData(), timeoutPromise])
```

### Error Handling
```typescript
// Custom error types
class NetworkError extends Error {
  constructor(message: string, public status: number) {
    super(message)
    this.name = 'NetworkError'
  }
}

// Error boundary utility
const withErrorBoundary = async <T>(
  fn: () => Promise<T>,
  fallback: T
): Promise<T> => {
  try {
    return await fn()
  } catch (error) {
    console.error(error)
    return fallback
  }
}
```

## Form Handling

### Form Validation
```typescript
// Basic validation
const validateEmail = (email: string): boolean => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
}

// Complex validation
const validatePassword = (password: string): string[] => {
  const errors: string[] = []
  if (password.length < 8) {
    errors.push('Password must be at least 8 characters')
  }
  if (!/[A-Z]/.test(password)) {
    errors.push('Password must contain uppercase letter')
  }
  return errors
}
```

### Form Utilities
```typescript
// Form data to object
const formToObject = (form: HTMLFormElement): Record<string, string> => {
  const formData = new FormData(form)
  return Object.fromEntries(formData)
}

// Object to form data
const objectToFormData = (obj: Record<string, any>): FormData => {
  const formData = new FormData()
  Object.entries(obj).forEach(([key, value]) => {
    formData.append(key, value)
  })
  return formData
}
```

## Security Utilities

### XSS Prevention
```typescript
// HTML escape
const escapeHtml = (unsafe: string): string => {
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;')
}

// URL sanitization
const sanitizeUrl = (url: string): string => {
  const pattern = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi
  return pattern.test(url) ? url : ''
}
```

### CSRF Protection
```typescript
// CSRF token handling
const getCsrfToken = (): string => {
  return document
    .querySelector('meta[name="csrf-token"]')
    ?.getAttribute('content') ?? ''
}

// Add CSRF token to requests
const addCsrfToken = (headers: Headers): Headers => {
  headers.append('X-CSRF-Token', getCsrfToken())
  return headers
}
```

## Performance Utilities

### Memoization
```typescript
// Simple memoization
const memoize = <T>(fn: (...args: any[]) => T): typeof fn => {
  const cache = new Map()
  return (...args) => {
    const key = JSON.stringify(args)
    if (cache.has(key)) return cache.get(key)
    const result = fn(...args)
    cache.set(key, result)
    return result
  }
}

// With TTL
const memoizeWithTTL = <T>(
  fn: (...args: any[]) => T,
  ttl: number
): typeof fn => {
  const cache = new Map()
  return (...args) => {
    const key = JSON.stringify(args)
    const cached = cache.get(key)
    if (cached && Date.now() - cached.timestamp < ttl) {
      return cached.value
    }
    const result = fn(...args)
    cache.set(key, { value: result, timestamp: Date.now() })
    return result
  }
}
```

## Best Practices
- Use proper error handling
- Implement proper validation
- Use proper security measures
- Follow performance guidelines
- Use proper type checking
- Implement proper logging
- Use proper debugging tools
- Follow proper documentation
- Use proper testing patterns
- Follow proper code organization 